[project]
name = "stab-payment-api"
version = "1.0.0"
requires-python = ">=3.11"
description = "STAB Payment API - Backend for payment processing"
authors = [
    {name = "STAB Team", email = "dev@stab.com"}
]
dependencies = [
    # Core Framework
    "fastapi>=0.109.1,<0.115.0",
    "uvicorn[standard]>=0.24.0,<0.32.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.0.3,<3.0.0",
    # Database
    "sqlalchemy>=2.0.23,<2.1.0",
    "alembic>=1.12.1,<2.0.0",
    "asyncpg>=0.29.0,<0.30.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    # Auth & Security
    "pyjwt[crypto]>=2.8.0,<3.0.0",
    "cryptography>=43.0.1,<44.0.0",
    "email-validator>=2.1.2,<3.0.0",
    # AWS
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Utils
    "python-dotenv==1.0.0",
    "typer==0.17.4",
    "httpx>=0.26.0,<0.28.0",
    "jinja2>=3.1.2",
    "requests>=2.32.5",
    "urllib3>=2.5.0,<3.0.0",
    # PayPay SDK
    "paypayopa>=1.0.0",
    "setuptools>=80.9.0",
]

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-env>=1.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.3.0",
    "httpx>=0.26.0,<0.28.0",
    "faker>=19.12.0",

    # Code Quality
    "ruff>=0.8.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.7",

    # Dev Tools
    "ipdb>=0.13.13",
    "ipython>=8.17.0",
    "rich>=14.1.0",
    "watchdog>=3.0.0",
    "py-spy>=0.3.14",

    # Local DB
    "aiosqlite>=0.20.0",
    "greenlet>=3.0.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
]


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -ra
    --strict-markers
    --cov=app
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=0
    --maxfail=1
    --tb=short
    --asyncio-mode=auto
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__init__.py",
    "*/config.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "alembic"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "alembic",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "D",      # pydocstyle (docstrings)
    "S",      # flake8-bandit (security)
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip() without an explicit strict= parameter
    "B904",   # raise without from inside except (intentional in many cases)
    "B007",   # unused loop variable
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D205",   # 1 blank line required between summary and description
    "D212",   # Multi-line docstring summary should start at first line
    "D213",   # Multi-line docstring summary should start at second line (conflicts with D212)
    "D400",   # First line should end with a period
    "D401",   # First line should be in imperative mood
    "D415",   # First line should end with punctuation
    "S104",   # Binding to 0.0.0.0 (expected in config)
    "S105",   # Hardcoded password (false positives in config)
    "N815",   # Mixed case variable (required by external APIs like PayPay)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "D"]
"scripts/*" = ["D"]
"alembic/*" = ["D"]

[tool.ruff.lint.isort]
known-first-party = ["app", "tests", "scripts"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "pytest", "httpx"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
