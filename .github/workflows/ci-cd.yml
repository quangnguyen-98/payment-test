name: CI/CD Pipeline

on:
  push:
    branches: [main, stg]
    tags: ['v*']
  pull_request:
    branches: [main, stg]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Stage 1: Code Quality
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run Ruff Lint
        run: uv run ruff check . --output-format=github

      - name: Run Ruff Format Check
        run: uv run ruff format --check .

  # ============================================================================
  # Stage 2: Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    # OPTIMIZED: Run in parallel with quality (no dependency)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Export requirements for pip-audit
        run: uv pip compile pyproject.toml -o requirements.txt

      - name: Run pip-audit (Dependency Scan)
        uses: pypa/gh-action-pip-audit@v1.1.0
        with:
          inputs: requirements.txt
          vulnerability-service: osv

      - name: Run Bandit (SAST)
        run: |
          uv run bandit -r app/ \
            -f json \
            -o bandit-report.json \
            -ll \
            --skip B101,B601,B104
        continue-on-error: false

      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  # ============================================================================
  # Stage 3: AI Code Review (DISABLED - See note below)
  # ============================================================================
  # NOTE: Gemini AI Code Review is currently disabled due to API incompatibility
  #
  # Issue: Gemini API does not support OpenAI-compatible endpoint format
  # Error: 404 NotFoundError when calling https://generativelanguage.googleapis.com/v1beta/openai/
  #
  # Alternative solutions:
  # 1. Use CodeRabbit (FREE for public repos):
  #    - Install GitHub App: https://github.com/apps/coderabbit-ai
  #    - Optional: Add .coderabbit.yaml for custom instructions
  #
  # 2. Use OpenAI ChatGPT (PAID ~$5-10/month):
  #    - Uncomment code below
  #    - Replace GEMINI_API_KEY with OPENAI_API_KEY
  #    - Remove OPENAI_API_ENDPOINT line
  #    - Change model to "gpt-4" or "gpt-3.5-turbo"
  #
  # 3. Write custom Gemini integration (FREE but complex):
  #    - Create custom GitHub Action
  #    - Call Gemini API directly (not via OpenAI compatibility layer)
  #
  # ai-review:
  #   name: AI Code Review (Gemini)
  #   runs-on: ubuntu-latest
  #   needs: security
  #   if: github.event_name == 'pull_request'
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #
  #     - name: Gemini Code Review
  #       uses: anc95/ChatGPT-CodeReview@main
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         OPENAI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  #         OPENAI_API_ENDPOINT: "https://generativelanguage.googleapis.com/v1beta/openai/"
  #       with:
  #         model: "gemini-1.5-flash"
  #         language: vi
  #         top_p: 1
  #         temperature: 1

  # ============================================================================
  # Stage 3: Testing
  # ============================================================================
  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: [quality, security]  # Wait for BOTH quality and security to pass

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run Tests with Coverage
        env:
          ENVIRONMENT: test
        run: |
          uv run pytest tests/ \
            -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=0
        continue-on-error: false

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # ============================================================================
  # Stage 4: Build & Push Docker Image
  # ============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'  # Only run on push events (not PRs)
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  # ============================================================================
  # Stage 5: Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/stg'
    environment: staging
    steps:
      - name: Verify Environment Configuration
        run: |
          echo "=========================================="
          echo "🔧 STAGING ENVIRONMENT VERIFICATION"
          echo "=========================================="
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Secrets/Variables loaded from environment:"
          echo "  - KUBE_CONFIG: ${{ secrets.KUBE_CONFIG != '' && '✅ Present' || '❌ Missing' }}"
          echo "  - API_URL: ${{ secrets.API_URL != '' && '✅ Present' || '❌ Missing' }}"
          echo "  - SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL != '' && '✅ Present' || '❌ Missing' }}"
          echo "=========================================="

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Staging
        run: |
          kubectl set image deployment/payment-api \
            payment-api=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:stg-${{ github.sha }} \
            -n staging

      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/payment-api -n staging --timeout=5m

      - name: Run Database Migrations
        run: |
          kubectl exec -n staging deployment/payment-api -- \
            /app/.venv/bin/alembic upgrade head

      - name: Run Smoke Tests
        run: |
          API_URL="${{ secrets.API_URL }}"
          curl -f "$API_URL/health" || exit 1
          curl -f "$API_URL/api/v1/health" || exit 1

      - name: Notify Success
        if: success()
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "✅ [STAGING] Payment API deployed successfully",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Payment API* deployed to *🔧 STAGING*\n*Commit:* ${{ github.sha }}\n*Branch:* stg"
                  }
                }
              ]
            }

  # ============================================================================
  # Stage 6: Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    environment: production
    steps:
      - name: Verify Environment Configuration
        run: |
          echo "=========================================="
          echo "🚀 PRODUCTION ENVIRONMENT VERIFICATION"
          echo "=========================================="
          echo "Environment: production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Is Tag: ${{ startsWith(github.ref, 'refs/tags/v') }}"
          echo ""
          echo "Secrets/Variables loaded from environment:"
          echo "  - KUBE_CONFIG: ${{ secrets.KUBE_CONFIG != '' && '✅ Present' || '❌ Missing' }}"
          echo "  - API_URL: ${{ secrets.API_URL != '' && '✅ Present' || '❌ Missing' }}"
          echo "  - SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL != '' && '✅ Present' || '❌ Missing' }}"
          echo "=========================================="

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Production
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="main-${{ github.sha }}"
          fi

          kubectl set image deployment/payment-api \
            payment-api=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG \
            -n production

      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/payment-api -n production --timeout=10m

      - name: Run Database Migrations
        run: |
          kubectl exec -n production deployment/payment-api -- \
            /app/.venv/bin/alembic upgrade head

      - name: Run Smoke Tests
        run: |
          API_URL="${{ secrets.API_URL }}"
          curl -f "$API_URL/health" || exit 1
          curl -f "$API_URL/api/v1/health" || exit 1

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            ## Payment API Release ${{ github.ref_name }}

            Deployed to production at $(date -u +'%Y-%m-%d %H:%M:%S UTC')

      - name: Notify Success
        if: success()
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "🚀 [PRODUCTION] Payment API deployed successfully",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Payment API* deployed to *🚀 PRODUCTION*\n*Version:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
                  }
                }
              ]
            }

      - name: Notify Failure
        if: failure()
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "❌ [PRODUCTION] Payment API deployment FAILED",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Payment API* deployment to *🚀 PRODUCTION* FAILED\n*Check:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }

  # ============================================================================
  # Stage 7: CI/CD Success Gate
  # ============================================================================
  ci-cd-success:
    name: CI/CD Success
    runs-on: ubuntu-latest
    # FIXED: Must check ALL stages including deploy
    needs: [quality, security, test, build, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Check All Jobs Status
        run: |
          echo "=== CI/CD Pipeline Status ==="
          echo "Quality:     ${{ needs.quality.result }}"
          echo "Security:    ${{ needs.security.result }}"
          echo "Test:        ${{ needs.test.result }}"
          echo "Build:       ${{ needs.build.result }}"
          echo "Deploy-Stg:  ${{ needs.deploy-staging.result }}"
          echo "Deploy-Prod: ${{ needs.deploy-production.result }}"
          echo ""

          # Check required stages (always run)
          if [[ "${{ needs.quality.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ CI/CD Failed: Required stages failed"
            exit 1
          fi

          # Check build stage (only runs on push)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ needs.build.result }}" != "success" ]]; then
              echo "❌ CI/CD Failed: Build stage failed"
              exit 1
            fi

            # Check deploy stages (conditional based on branch)
            if [[ "${{ needs.deploy-staging.result }}" == "failure" ]] || \
               [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
              echo "❌ CI/CD Failed: Deployment stage failed"
              exit 1
            fi
          fi

          echo "✅ CI/CD Passed"
